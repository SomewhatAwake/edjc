name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose
      continue-on-error: true  # Tests may fail without proper API configuration

    - name: Run unit tests only
      run: cargo test --lib --verbose

    - name: Build
      run: cargo build --release --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build-release:
    name: Build Release
    needs: [test, security-audit]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: so
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: dll
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: so

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/libedjc.${{ matrix.ext }} release/edjc.${{ matrix.ext }}
        cp README.md release/
        cp LICENSE release/
        cp edjc.toml.example release/

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy target\${{ matrix.target }}\release\edjc.${{ matrix.ext }} release\edjc.${{ matrix.ext }}
        copy README.md release\
        copy LICENSE release\
        copy edjc.toml.example release\

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: edjc-${{ matrix.target }}
        path: release/

    - name: Upload to release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: release/*
        name: EDJC ${{ github.ref_name }}
        body: |
          ## Elite Dangerous Jump Calculator (EDJC) ${{ github.ref_name }}
          
          ### Installation
          1. Download the appropriate plugin file for your platform
          2. Copy to your HexChat plugins directory
          3. Copy `edjc.toml.example` to your config directory and rename to `edjc.toml`
          4. Add your Inara API key to the config file
          5. Restart HexChat
          
          ### Supported Platforms
          - **Linux**: `edjc.so` (x86_64)
          - **Windows**: `edjc.dll` (x86_64)
          - **macOS**: `edjc.so` (x86_64)
          
          ### What's New
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Generate documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: edjc-docs.example.com  # Replace with your custom domain if available

  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1

    - name: Create issue for outdated dependencies
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Outdated dependencies detected',
            body: 'Automated check found outdated dependencies. Please review and update.',
            labels: ['dependencies', 'maintenance']
          });